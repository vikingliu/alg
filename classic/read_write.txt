读者与写者问题（The readers-writers problem）是指多个进程对一个共享资源进行读写操作的问题。在两组并发执行的进程中，一组进程只要求读数据文件内容，称为读者；另一组进程要求修改数据文件内容，称为写者。对读者和写者的要求是：

(1)允许多个读者同时读，即读者可以同时读数据文件，而不需要互斥。

(2)一个写者不能和其他进程同时访问数据文件，它们之间必须互斥。

当若干读者正在读数据文件时，来了一个写者，写者需要等待所有读者的读操作结束后，才能对数据文件进行写操作。那么，当写者正在等待读者完成读操作期间，又来了新的读者，系统该如何处理呢？

(1) 读者优先。若允许新来的读者进行读操作，则称该处理方式为读者优先。读者优先的思想是除非有写者正在写文件，否则没有一个读者需要等待。

(2) 写着优先。若不允许新来的读者进行读操作，而需要等待写者写操作完成后，在没有写者时才允许其读，则称该处理方式为写者优先。写者优先的思想是一旦一个写者到来，它应该尽快对文件进行写操作，即如果有一个写者在等待，那么，就不允许新到来的读者进行读操作。

(3) 公平策略。读者优先与写者优先这两类读者与写者问题都会导致“饥饿”现象的发生。对于前者，当有新的读者不断地到来，会使写者没有机会进行写操作；对于后者，当有新写者不断地到来，就会使新来的读者挨饿。Hoare提出了一种更公平的策略，由如下规则定义。

规则1:在一个读序列中，如果有写者在等待，那么就不允许有新的读者进行读操作。

规则2:在一个写操作结束时，所有等待的读者应该比下一个写者有更高的优先权。

1. 读者优先算法
在该问题中，数据文件属于临界资源，写者与读者之间、写者与写者之间要互斥地访问该资源。读者与读者不互斥，有读者在读操作期间，写者将被阻塞，即只要第一个读者取得了读文件的权利则其他读者可以跟着读文件，所以，可以将写者与读者之间的互斥看作是写者与第一个读者之间的互斥。当最后一个读者结束读操作时，若有写者在等待，才将写者唤醒。设置互斥信号量mutex，实现读者与写者、写者与写者之间的互斥。当一个写者完成写操作后，若有读者要读或者有其他写者要写，则唤醒其中的一个，具体唤醒哪一个与mutex等待队列的管理有关，一般情况下，唤醒该等待队列之首进程。设置一个变量readcount，其初值为0，它代表正在读操作的读者人数。因为所有读者都要共享该变量，因此它是一个临界资源，采用互斥信号量Rmutex管理该变量。

读者与写者问题（读者优先）的同步算法描述如下：

int readcount=0；    /* 正在读的读者数 */

semaphore mutex=1；   /* 对数据文件进行保护的互斥信号量 */

semaphore Rmutex=1；  /* 对变量readcount进行保护的互斥信号量 */

main() {

   创建M个读者进程read(i)；   /* i表示第i个读者 */

创建N个写者进程write(i)；  /* i表示第i个写者 */

cobegin

     read(1)；read(2)；……；read(M)；   /* 并发执行的M个读者 */

     write(1)；write(2)；……；write(N)；/* 并发执行的N个写者 */

   coend

}

read(int i)   /* 读者 */

{

  while (1) {

P(Rmutex)；

readcount++；

if (readcount==1)

  P(mutex)；/* 如果该读者是第1位读者，则申请进入读操作，否则直接进入。*/

V(Rmutex)；

读数据；

P(Rmutex)；/* 读完后离开时，修改readcount变量。*/

readcount--；

if (readcount==0)

  V(mutex)；/* 当读者全部离开时，释放数据文件资源，并负责唤醒写者。*/

   V（Rmutex）；

 }

}

write(int i)       /* 写者 */

{

  while(1){

   P(mutex)；

   写数据；

   V(mutex)；

  }

}

2. 写者优先算法 
int readcount=0；  /* 正在读的读者数 */

int writecount=0；  /* 正在写的读者数 */

semaphore mutex=1；/* 对数据文件进行保护的互斥信号量 */

semaphore Rmutex=1；/* 对变量readcount进行保护的互斥信号量 */

semaphore Wmutex=1；/* 对变量writecount进行保护的互斥信号量 */

semaphore write=1；/* 写者 */

main()

{

   创建M个读者进程read(i)；   /* i表示第i个读者 */

创建N个写者进程write(i)；  /* i表示第i个写者 */

cobegin

     read(1)；read(2)；……；read(M)；   /* 并发执行的M个读者 */

     write(1)；write(2)；……；write(N)；/* 并发执行的N个写者 */

   coend

}

read(int i)   /* 读者 */
{
      while (1) {
           P(write);  //没有写者则可以读
           P(Rmutex)；
           readcount++；
           if (readcount==1)
               P(mutex)；/* 如果该读者是第1位读者，则申请进入读操作，否则直接进入。*/
           V(Rmutex)；
           V(write);
           读数据；
           P(Rmutex)；/* 读完后离开时，修改readcount变量。*/
           readcount--；
           if (readcount==0)
               V(mutex)；/* 当读者全部离开时，释放数据文件资源，并负责唤醒写者。*/
           V（Rmutex）；
     }
}

write(int i)       /* 写者 */
{
  while(1){
        P(Wmutex)；
        writecount++；
        if (writecount==1)
            P(write); //写者到，则阻止后继读者
        V(Wmutex)；

        P(mutex);
           写数据；
        V(mutex);

        P(Wmutex)；/* 写完后离开时，修改writecount变量。*/
        writecount--；
        if (writecount==0)
            V(write)；/* 当写者全部离开时，释放数据文件资源，并负责唤醒读者。*/
        V（Wmutex）；
  }

}

3. 读者与写者公平算法
无写者，则多个读者可同时读，有写者请求，则后来的读者不能进入。在一个写操作结束时，所有等待的读者应该比下一个写者有更高的优先权。

int readcount=0；  /* 正在读的读者数 */
semaphore mutex=1；/* 对数据文件进行保护的互斥信号量 */
semaphore Rmutex=1；/* 对变量readcount进行保护的互斥信号量 */
semaphore first=1; /* 用于写者来了后，后续读者不能读，
    或一个写者结束后，在下一个写者之前请求读的读者先进入读操作。*/

main()
{
  创建M个读者进程read(i)；   /* i表示第i个读者 */
  创建N个写者进程write(i)；  /* i表示第i个写者 */
  cobegin
     read(1)；read(2)；……；read(M)；   /* 并发执行的M个读者 */
     write(1)；write(2)；……；write(N)；/* 并发执行的N个写者 */
  coend
}

read(int i)   /* 读者 */
{
  while (1) {
        P(first) /*若有写者，则阻塞等待*/
        P(Rmutex)；
        readcount++；
        if (readcount==1)
            P(mutex)；/* 如果该读者是第1位读者，则申请进入读操作，否则直接进入。*/
        V(Rmutex)；
        V(first);

        读数据；

        P(Rmutex)；/* 读完后离开时，修改readcount变量。*/
        readcount--；
        if (readcount==0)
            V(mutex)；/* 当读者全部离开时，释放数据文件资源，并负责唤醒写者。*/
        V（Rmutex）；
 }
}

write(int i)       /* 写者 */
{
  while(1){
   P(first); /*无读者，则进入，否则等待*/
   P(mutex)；
   写数据；
   V(mutex)；
   V(first);
  }
}

4. 类似问题的解答

一条南北走向的大河上，有一座独木桥，东岸和西岸的汽车可分别通行：为保证安全，东岸或者西岸的汽车需要过桥时，如果桥面上无车，则允许一方的汽车过桥；当一方的汽车全部过完后，另一方的汽车才可以过桥。而且，桥面上最多可以承载12辆汽车同时通行。试用信号量和PV操作，写出东岸、西岸的汽车过独木桥的并发程序。

该题可看作是读者与写者问题（读者优先）的变种。如果理解读者与写者问题，该题就不难解答。

Semaphore bridge = 1;
Semaphore e_mutex = 1;
Semaphore w_mutex = 1;
Semaphore empty = 12;

Int e_count = 0；

Int w_count = 0;



east() {
    P(e_mutex);
    e_count++;
    if(e_count==1){
        P(bridge);
    }
    V(e_mutex);
    P(empty);
    行驶;
    V(empty);
    P(e_mutex);
    e_count--;
    if(e_count==0){
        V(bridge);
    }
    V(e_mutex);
}



west() {
    P(w_mutex);
    w_count++;
    if(w_count==1){
        P(bridge);
    }
    V(w_mutex);
    P(empty);
    行驶;
    V(empty);
    P(w_mutex);
    w_count--;
    if(w_count==0){
        V(bridge);
    }
    V(w_mutex);
}